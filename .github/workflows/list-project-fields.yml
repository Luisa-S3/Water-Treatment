name: list project fields 

on:
  pull_request:
    types: [opened, reopened, edited, ready_for_review, synchronize, labeled]
    branches:
      - main

permissions:
  contents: read
  pull-requests: read
  repository-projects: write

jobs:
  upsert-pr-in-project:
    runs-on: ubuntu-latest
    steps:
      - name: Sync PR to Project V2
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |

            const ownerLogin = "Luisa-S3";     // Usuario u organización dueña del Project V2
            const projectNumber = 1;           // Número del Project en la URL (ej: https://github.com/orgs/Luisa-S3/projects/1)
            const statusFieldName = "Status";  // Nombre exacto del campo single-select
            const targetStatusMap = {
              "open": "To do",
              "closed": "Done",
              "merged": "Merged"
            };
            const pr = context.payload.pull_request;

            if (!pr) {
              core.setFailed("Evento sin pull_request en el contexto");
              return;
            }

            // Obtener el estado para el campo Status
            let prState = pr.state; // "open" o "closed"
            if (pr.merged_at) prState = "merged";
            const targetStatus = targetStatusMap[prState] || "To do";

            // Query para obtener el proyecto y sus campos y items
            const queryProject = `
              query($login: String!, $number: Int!) {
                u: user(login: $login) {
                  projectV2(number: $number) {
                    id
                    title
                    fields(first: 100) {
                      nodes {
                        id
                        name
                        dataType
                        __typename
                        ... on ProjectV2SingleSelectField {
                          options { id name }
                        }
                      }
                    }
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on PullRequest {
                            id
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const res = await github.graphql(queryProject, { login: ownerLogin, number: projectNumber });
            const project = res.u?.projectV2;

            if (!project) {
              core.setFailed(`No se encontró ProjectV2 ${ownerLogin} #${projectNumber}`);
              return;
            }

            // Buscar campos específicos por nombre
            const fields = project.fields.nodes;

            const statusField = fields.find(f => f.name === statusFieldName && f.__typename === "ProjectV2SingleSelectField");
            const prIdField = fields.find(f => f.name === "PR ID");
            const authorField = fields.find(f => f.name === "Author PR");
            const dateField = fields.find(f => f.name === "Date");
            const descriptionField = fields.find(f => f.name === "Description");

            if (!statusField) {
              core.warning(`No se encontró el campo Single-Select "${statusFieldName}".`);
            }
            if (!prIdField) {
              core.warning('No se encontró el campo "PR ID".');
            }
            if (!authorField) {
              core.warning('No se encontró el campo "Author PR".');
            }
            if (!dateField) {
              core.warning('No se encontró el campo "Date".');
            }
            if (!descriptionField) {
              core.warning('No se encontró el campo "Description".');
            }

            // Encontrar opción del status que corresponde
            let statusOptionId = null;
            if (statusField?.options) {
              const option = statusField.options.find(o => o.name === targetStatus);
              if (option) {
                statusOptionId = option.id;
              } else {
                core.warning(`No existe opción "${targetStatus}" en campo Status.`);
              }
            }

            // Buscar si ya existe item para este PR (por content.id = pr.node_id)
            const existingItem = project.items.nodes.find(item => item.content?.id === pr.node_id);

            let itemId = existingItem?.id;

            // Si no existe, agregarlo
            if (!itemId) {
              const addMutation = `
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                    item { id }
                  }
                }
              `;
              const addRes = await github.graphql(addMutation, { projectId: project.id, contentId: pr.node_id });
              itemId = addRes.addProjectV2ItemById?.item?.id;
              if (!itemId) {
                core.setFailed("No se pudo agregar el PR al proyecto.");
                return;
              }
            }

            // Funciones para actualizar campos

            async function updateSingleSelectField(field, optionId) {
              if (!field || !optionId) return;
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;
              await github.graphql(mutation, {
                projectId: project.id,
                itemId,
                fieldId: field.id,
                optionId
              });
            }

            async function updateTextField(field, text) {
              if (!field) return;
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $text: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { text: $text }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;
              await github.graphql(mutation, {
                projectId: project.id,
                itemId,
                fieldId: field.id,
                text: text || ""
              });
            }

            async function updateDateField(field, dateISO) {
              if (!field || !dateISO) return;

              const dateOnly = dateISO.substring(0, 10);

              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $dateValue: Date!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { date: $dateValue }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;

              await github.graphql(mutation, {
                projectId: project.id,
                itemId,
                fieldId: field.id,
                dateValue: dateOnly
              });
            }

            // Actualizar campos

            if (statusField && statusOptionId) {
              await updateSingleSelectField(statusField, statusOptionId);
            }

            if (prIdField) {
              await updateTextField(prIdField, pr.number.toString());
            }

            if (authorField) {
              await updateTextField(authorField, pr.author?.login || "");
            }

            if (dateField) {
              // pr.updated_at o pr.created_at ? Puedes usar updated_at para reflejar cambios
              await updateDateField(dateField, pr.updated_at || pr.created_at);
            }

            if (descriptionField) {
              await updateTextField(descriptionField, pr.body || "");
            }

            console.log(`✅ PR #${pr.number} sincronizado en Project "${project.title}" (item ${itemId})`);

