name: list project fields 

on:
  pull_request:
    types: [opened, reopened, edited, ready_for_review, synchronize, labeled]
    branches:
      - main

permissions:
  contents: read
  pull-requests: read
  repository-projects: write

jobs:
  upsert-pr-in-project:
    runs-on: ubuntu-latest
    steps:
      - name: Sync PR to Project V2
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            const ownerLogin = "Luisa-S3";   // Cambia aquí si es organización o usuario
            const projectNumber = 1;
            const statusFieldName = "Status";
            const prIdFieldName = "PR ID";
            const authorFieldName = "Author PR";
            const dateFieldName = "Date";
            const descriptionFieldName = "Description";

            const pr = context.payload.pull_request;
            if (!pr) {
              core.setFailed("No pull request found in event context.");
              return;
            }

            // Determinar estado para el campo status
            const statusMap = {
              open: "To do",
              closed: pr.merged_at ? "Merged" : "Done",
            };
            const targetStatus = statusMap[pr.state] || "To do";

            // Query para obtener proyecto, campos y items (user y org)
            const query = `
              query($login: String!, $number: Int!) {
                u: user(login: $login) {
                  projectV2(number: $number) {
                    id
                    title
                    fields(first: 100) {
                      nodes {
                        id
                        name
                        dataType
                        __typename
                        ... on ProjectV2SingleSelectField {
                          options { id name }
                        }
                      }
                    }
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on PullRequest {
                            id
                            number
                          }
                        }
                      }
                    }
                  }
                }
                o: organization(login: $login) {
                  projectV2(number: $number) {
                    id
                    title
                    fields(first: 100) {
                      nodes {
                        id
                        name
                        dataType
                        __typename
                        ... on ProjectV2SingleSelectField {
                          options { id name }
                        }
                      }
                    }
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on PullRequest {
                            id
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            // Ejecutar query
            const res = await github.graphql(query, { login: ownerLogin, number: projectNumber });
            const project = res.u?.projectV2 ?? res.o?.projectV2;

            if (!project) {
              core.setFailed(`ProjectV2 not found for login ${ownerLogin} number ${projectNumber}`);
              return;
            }

            const fields = project.fields.nodes;

            // Buscar campos por nombre
            const statusField = fields.find(f => f.name === statusFieldName && f.__typename === "ProjectV2SingleSelectField");
            const prIdField = fields.find(f => f.name === prIdFieldName);
            const authorField = fields.find(f => f.name === authorFieldName);
            const dateField = fields.find(f => f.name === dateFieldName);
            const descriptionField = fields.find(f => f.name === descriptionFieldName);

            // Encontrar opción correcta para Status
            let statusOptionId = null;
            if (statusField?.options) {
              const option = statusField.options.find(o => o.name === targetStatus);
              if (option) statusOptionId = option.id;
              else core.warning(`Status option "${targetStatus}" not found in field "${statusFieldName}"`);
            }

            // Buscar si ya existe item para este PR
            const existingItem = project.items.nodes.find(item => item.content?.id === pr.node_id);

            let itemId = existingItem?.id;

            // Si no existe, crear item nuevo
            if (!itemId) {
              const addMutation = `
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                    item { id }
                  }
                }
              `;
              const addRes = await github.graphql(addMutation, { projectId: project.id, contentId: pr.node_id });
              itemId = addRes.addProjectV2ItemById?.item?.id;
              if (!itemId) {
                core.setFailed("Failed to add PR to ProjectV2");
                return;
              }
            }

            // Funciones para actualizar campos

            async function updateSingleSelect(field, optionId) {
              if (!field || !optionId) return;
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;
              await github.graphql(mutation, { projectId: project.id, itemId, fieldId: field.id, optionId });
            }

            async function updateText(field, text) {
              if (!field) return;
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $text: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { text: $text }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;
              await github.graphql(mutation, { projectId: project.id, itemId, fieldId: field.id, text: text || "" });
            }

            async function updateDate(field, dateISO) {
              if (!field || !dateISO) return;
              const dateOnly = dateISO.substring(0, 10); // YYYY-MM-DD
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $dateValue: Date!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { date: $dateValue }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;
              await github.graphql(mutation, { projectId: project.id, itemId, fieldId: field.id, dateValue: dateOnly });
            }

            // Actualizar campos
            if (statusField && statusOptionId) await updateSingleSelect(statusField, statusOptionId);
            if (prIdField) await updateText(prIdField, pr.number.toString());
            if (authorField) await updateText(authorField, pr.author?.login || "");
            if (dateField) await updateDate(dateField, pr.updated_at || pr.created_at);
            if (descriptionField) await updateText(descriptionField, pr.body || "");

            console.log(`✅ PR #${pr.number} synced to project "${project.title}", item ${itemId}`);
