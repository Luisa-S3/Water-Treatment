name: list project fields 

on:
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize, labeled]
    branches:
      - main

permissions:
  contents: read
  pull-requests: read
  repository-projects: write

jobs:
  upsert-pr-in-project:
    runs-on: ubuntu-latest
    steps:
      - name: Add/Update PR in Project V2 and list fields
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            const ownerLogin = "Luisa-S3";    // usuario u organización dueña del Project
            const projectNumber = 1;          // número del Project en la URL
            const statusFieldName = "Status"; // nombre EXACTO del campo Single-Select
            const targetStatus = "To do";     // opción EXACTA dentro de ese campo

            const prNodeId = context.payload.pull_request?.node_id;
            if (!prNodeId) {
              core.setFailed("No se pudo obtener el node_id del PR desde el contexto del evento.");
              return;
            }

            // --- Query para obtener el proyecto y sus campos ---
            const projectQuery = `
              query($login: String!, $number: Int!) {
                u: user(login: $login) {
                  projectV2(number: $number) {
                    ...Proj
                  }
                }
              }
              fragment Proj on ProjectV2 {
                id
                title
                fields(first: 100) {
                  nodes {
                    __typename
                    ... on ProjectV2FieldCommon {
                      id
                      name
                      dataType
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options { id name }
                    }
                  }
                }
              }
            `;

            // --- Query para obtener datos del PR (autor, assignees, estado, fechas, descripción) ---
            const prQuery = `
              query($prId: ID!) {
                node(id: $prId) {
                  ... on PullRequest {
                    title
                    author { login }
                    assignees(first: 10) {
                      nodes { login }
                    }
                    state
                    createdAt
                    closedAt
                    mergedAt
                    body
                  }
                }
              }
            `;

            // Obtener el Project V2 y sus campos
            const res = await github.graphql(projectQuery, { login: ownerLogin, number: projectNumber });
            const project = res.u?.projectV2 ?? res.o?.projectV2;
            if (!project) {
              core.setFailed(`No se encontró ProjectV2 ${ownerLogin} #${projectNumber} (verifica si es user u org y el token).`);
              return;
            }

            console.log(`📌 Project: ${project.title} (${project.id})`);
            console.log("📋 Campos:");
            for (const f of project.fields.nodes) {
              const name = f.name ?? "(sin nombre)";
              const id = f.id ?? "(sin id)";
              const typeName = f.__typename ?? "(desconocido)";
              const dt = f.dataType ?? "(n/a)";
              console.log(`  • ${name} | ID: ${id} | __typename: ${typeName} | dataType: ${dt}`);
              if (typeName === "ProjectV2SingleSelectField" && Array.isArray(f.options)) {
                for (const opt of f.options) {
                  console.log(`      - opción: ${opt.name} (${opt.id})`);
                }
              }
            }

            // Obtener datos del PR
            const prData = await github.graphql(prQuery, { prId: prNodeId });
            const pr = prData.node;

            console.log("PR title:", pr.title);
            console.log("Author:", pr.author?.login);
            console.log("Assignees:", pr.assignees.nodes.map(a => a.login).join(", "));
            console.log("Status:", pr.state);
            console.log("Created at:", pr.createdAt);
            console.log("Closed at:", pr.closedAt);
            console.log("Merged at:", pr.mergedAt);
            console.log("Description:", pr.body);

            // Buscar el campo Single-Select "Status" y la opción "To do"
            const fields = project.fields.nodes ?? [];
            const statusField = fields.find(f => f.__typename === "ProjectV2SingleSelectField" && f.name === statusFieldName);
            if (!statusField) {
              console.log(`⚠️  No se encontró el campo Single-Select "${statusFieldName}". Se agregará el PR sin actualizar campo.`);
            }

            let statusOptionId = null;
            if (statusField?.options?.length) {
              const opt = statusField.options.find(o => o.name === targetStatus);
              if (!opt) {
                console.log(`⚠️  No existe la opción "${targetStatus}" en "${statusFieldName}".`);
              } else {
                statusOptionId = opt.id;
                console.log(`✅ Opción objetivo: ${targetStatus} (${statusOptionId})`);
              }
            }

            // --- Agregar PR al Project ---
            const addItemMutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `;
            const addRes = await github.graphql(addItemMutation, { projectId: project.id, contentId: prNodeId });
            const itemId = addRes.addProjectV2ItemById?.item?.id;
            if (!itemId) {
              core.setFailed("No se pudo agregar/obtener el item del Project para este PR.");
              return;
            }
            console.log(`🆔 Item en Project: ${itemId}`);

            // --- Actualizar campo Status si se pudo resolver opción ---
            if (statusField && statusOptionId) {
              const updateStatusMutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;
              await github.graphql(updateStatusMutation, {
                projectId: project.id,
                itemId,
                fieldId: statusField.id,
                optionId: statusOptionId
              });
              console.log(`✅ Campo "${statusFieldName}" actualizado a "${targetStatus}".`);
            } else {
              console.log("ℹ️  No se actualizó ningún campo (no encontrado u opción ausente).");
            }

            // Funciones para actualizar campos de texto y fecha
            async function updateTextField(field, text) {
              if (!field) return;
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $text: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { text: $text }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;
              await github.graphql(mutation, {
                projectId: project.id,
                itemId,
                fieldId: field.id,
                text
              });
            }

            async function updateDateField(field, dateISO) {
              if (!field) return;
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $date: DateTime!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { date: $date }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;
              await github.graphql(mutation, {
                projectId: project.id,
                itemId,
                fieldId: field.id,
                date: dateISO
              });
            }

            // Buscar campos adicionales para actualizar
            const assigneesField = fields.find(f => f.name === "Author PR");
            const dateField = fields.find(f => f.name === "Date");
            const descriptionField = fields.find(f => f.name === "Description");

            const assigneesText = pr.assignees.nodes.map(a => a.login).join(", ");

            // Elegir fecha según estado
            let dateToUse = pr.createdAt;
            if (pr.state === "MERGED" && pr.mergedAt) {
              dateToUse = pr.mergedAt;
            } else if (pr.state === "CLOSED" && pr.closedAt) {
              dateToUse = pr.closedAt;
            }

            // Actualizar campos adicionales
            await updateTextField(descriptionField, pr.body || "");
            await updateTextField(assigneesField, assigneesText);
            await updateDateField(dateField, dateToUse);

            console.log("✅ Campos adicionales actualizados: Description, Assignees, Date");
