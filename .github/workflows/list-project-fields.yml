name: list project fields

on:
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize, labeled]
    branches:
      - main

permissions:
  contents: read
  pull-requests: read
  repository-projects: write

jobs:
  upsert-pr-in-project:
    runs-on: ubuntu-latest
    steps:
      - name: Add/Update PR in Project V2 and list fields
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            const ownerLogin = "Luisa-S3";    // usuario u organizaci√≥n due√±a del Project
            const projectNumber = 1;          // n√∫mero del Project en la URL
            const statusFieldName = "Status"; // nombre EXACTO del campo Single-Select
            const targetStatus = "To do";     // opci√≥n EXACTA dentro de ese campo

            const prNodeId = context.payload.pull_request?.node_id;
            if (!prNodeId) {
              core.setFailed("No se pudo obtener el node_id del PR desde el contexto del evento.");
              return;
            }

            // --- Query que sirve tanto para user como para organization ---
            const query = `
              query($login: String!, $number: Int!) {
                u: user(login: $login) {
                  projectV2(number: $number) {
                    ...Proj
                  }
                }
              }
              fragment Proj on ProjectV2 {
                id
                title
                fields(first: 100) {
                  nodes {
                    __typename
                    ... on ProjectV2FieldCommon {
                      id
                      name
                      dataType
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options { id name }
                    }
                  }
                }
              }
            `;

            const res = await github.graphql(query, { login: ownerLogin, number: projectNumber });
            const project = res.u?.projectV2 ?? res.o?.projectV2;

            if (!project) {
              core.setFailed(`No se encontr√≥ ProjectV2 ${ownerLogin} #${projectNumber} (verifica si es user u org y el token).`);
              return;
            }

            console.log(`üìå Project: ${project.title} (${project.id})`);
            console.log("üìã Campos:");
            for (const f of project.fields.nodes) {
              const name = f.name ?? "(sin nombre)";
              const id = f.id ?? "(sin id)";
              const typeName = f.__typename ?? "(desconocido)";
              const dt = f.dataType ?? "(n/a)";
              console.log(`  ‚Ä¢ ${name} | ID: ${id} | __typename: ${typeName} | dataType: ${dt}`);

              if (typeName === "ProjectV2SingleSelectField" && Array.isArray(f.options)) {
                for (const opt of f.options) {
                  console.log(`      - opci√≥n: ${opt.name} (${opt.id})`);
                }
              }
            }

            // --- Buscar el campo Single-Select "Status" y la opci√≥n "To do" ---
            const fields = project.fields.nodes ?? [];
            const statusField = fields.find(f => f.__typename === "ProjectV2SingleSelectField" && f.name === statusFieldName);
            if (!statusField) {
              console.log(`‚ö†Ô∏è  No se encontr√≥ el campo Single-Select "${statusFieldName}". Se agregar√° el PR sin actualizar campo.`);
            }

            let statusOptionId = null;
            if (statusField?.options?.length) {
              const opt = statusField.options.find(o => o.name === targetStatus);
              if (!opt) {
                console.log(`‚ö†Ô∏è  No existe la opci√≥n "${targetStatus}" en "${statusFieldName}".`);
              } else {
                statusOptionId = opt.id;
                console.log(`‚úÖ Opci√≥n objetivo: ${targetStatus} (${statusOptionId})`);
              }
            }

            // --- Agregar PR al Project ---
            const addItem = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `;
            const addRes = await github.graphql(addItem, { projectId: project.id, contentId: prNodeId });
            const itemId = addRes.addProjectV2ItemById?.item?.id;
            if (!itemId) {
              core.setFailed("No se pudo agregar/obtener el item del Project para este PR.");
              return;
            }
            console.log(`üÜî Item en Project: ${itemId}`);

            // --- Actualizar campo Status si se pudo resolver opci√≥n ---
            if (statusField && statusOptionId) {
              const updateField = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;
              await github.graphql(updateField, {
                projectId: project.id,
                itemId,
                fieldId: statusField.id,
                optionId: statusOptionId
              });
              console.log(`‚úÖ Campo "${statusFieldName}" actualizado a "${targetStatus}".`);
            } else {
              console.log("‚ÑπÔ∏è  No se actualiz√≥ ning√∫n campo (no encontrado u opci√≥n ausente).");
            }

